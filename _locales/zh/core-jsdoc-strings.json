{
"AcceleratorRange.EightG": "加速器达到 8g 重力",
    "AcceleratorRange.FourG": "加速器达到 4g 重力",
    "AcceleratorRange.OneG": "加速器达到 1g 重力",
    "AcceleratorRange.TwoG": "加速器达到 2g 重力",
    "Array": "在列表中添加、移除和替换物品。",
    "Array.concat": "Concatenates the values with another array.",
    "Array.concat|param|arr": "The other array that is being concatenated with",
    "Array.every": "Tests whether all elements in the array pass the test implemented by the provided function.",
    "Array.every|param|callbackfn": "A function that accepts up to two arguments. The every method calls the callbackfn function one time for each element in the array.",
    "Array.fill": "Fills all the elements of an array from a start index to an end index with a static value. The end index is not included.",
    "Array.filter": "返回数组中满足回调函数中指定条件的元素。",
    "Array.filter|param|callbackfn": "一个可以接受两个参数的函数。filter 方法将为数组中的每个元素调用一次 callbackfn 函数。",
    "Array.find": "返回数组中第一个满足提供的测试函数的元素的值。否则返回undefined。",
    "Array.forEach": "Call a defined callback function on each element of an array.",
    "Array.forEach|param|callbackfn": "A function that accepts up to two arguments. The forEach method calls the callbackfn function one time for each element in the array.",
    "Array.get": "获取特定索引处的值。",
    "Array.get|param|index": "物品列表中以零为基础的位置，例如 0",
    "Array.indexOf": "返回值在列表中第一次出现处的索引。",
    "Array.indexOf|param|fromIndex": "要开始搜索的数组索引。如果忽略 fromIndex ，搜索将从索引 0 处开始。",
    "Array.indexOf|param|item": "要在数组中定位的值。",
    "Array.insertAt": "将值插入特定索引处，将数组长度增加 1。",
    "Array.insertAt|param|index": "列表中要插入值的以零为基础的位置，例如 0",
    "Array.isArray": "检查给定对象是否是数组。",
    "Array.join": "joins all elements of an array into a string and returns this string.",
    "Array.join|param|sep": "the string separator",
    "Array.length": "获取或设置数组的长度。此数字比数组中定义的最高元素个数大 1。",
    "Array.map": "在数组的每个元素上调用定义的回调函数，并返回一个包含结果的数组。",
    "Array.map|param|callbackfn": "一个可以接受两个参数的函数。map 方法将为数组中的每个元素调用一次 callbackfn 函数。",
    "Array.pop": "从数组中移除最后一个元素并返回此元素。",
    "Array.push": "向数组附加一个新元素。",
    "Array.reduce": "为数组中的所有元素调用指定回调函数。回调函数的返回值是累积结果，并在回调函数的下一次调用中以参数形式提供。",
    "Array.reduce|param|callbackfn": "一个可以接受三个参数的函数。reduce 方法将为数组中的每个元素调用一次 callbackfn 函数。",
    "Array.reduce|param|initialValue": "开始累积的初始值。callbackfn 函数的第一次调用将以参数而不是数组值形式提供这个值。",
    "Array.removeAt": "移除特定索引处的元素。",
    "Array.removeElement": "移除对象中的第一个事件。如果已移除则返回 true。",
    "Array.reverse": "反转数组中的元素。第一个数组元素成为最后一个，最后一个数组元素成为第一个。",
    "Array.set": "将值存储在特定索引处。",
    "Array.set|param|index": "列表中要存储值的以零为基础的位置，例如 0",
    "Array.shift": "从数组中移除第一个元素并返回此元素。此方法将更改数组的长度。",
    "Array.slice": "返回一部分数组。",
    "Array.slice|param|end": "数组指定部分的结尾，例如 0",
    "Array.slice|param|start": "数组指定部分的开头，例如 0",
    "Array.some": "Tests whether at least one element in the array passes the test implemented by the provided function.",
    "Array.some|param|callbackfn": "A function that accepts up to two arguments. The some method calls the callbackfn function one time for each element in the array.",
    "Array.sort": "排列数组的元素并返回数组。顺序不需要稳定。",
    "Array.splice": "移除数组中的元素。",
    "Array.splice|param|deleteCount": "要移除的元素个数，例如 0",
    "Array.splice|param|start": "数组中要开始移除元素的以零为基础的位置，例如 0",
    "Array.unshift": "向数组的开头添加一个元素并返回数组的新长度。",
    "Array@type": "在列表中添加、移除和替换物品。",
    "Boolean.toString": "返回对象的字符串表示。",
    "Buffer.fill": "具有给定值的缓冲器填充（片段）。",
    "Buffer.getNumber": "从缓冲器读取指定格式的数字。",
    "Buffer.length": "返回缓冲器对象的长度。",
    "Buffer.rotate": "将缓冲器在原处旋转。",
    "Buffer.rotate|param|length": "缓冲器中的元素个数。如果为负，长度设置为缓冲器长度减去开始。例如 -1",
    "Buffer.rotate|param|offset": "要偏移的字节数；使用负值右移",
    "Buffer.rotate|param|start": "在缓冲器中开始偏移。默认值为 0。",
    "Buffer.setNumber": "在缓冲器中写入指定格式的数字。",
    "Buffer.shift": "在原处移动缓冲器，不填充。",
    "Buffer.shift|param|length": "缓冲器中的元素个数。如果为负，长度设置为缓冲器长度减去开始。例如 -1",
    "Buffer.shift|param|offset": "要偏移的字节数；使用负值右移",
    "Buffer.shift|param|start": "在缓冲器中开始偏移。默认值为 0。",
    "Buffer.slice": "返回缓冲器片段的副本。",
    "Buffer.toHex": "Convert a buffer to its hexadecimal representation.",
    "Buffer.toString": "Convert a buffer to string assuming UTF8 encoding",
    "Buffer.write": "在当前缓冲器“dstOffset”处写入“src”内容。",
    "EventCreationMode": "如何创建事件。",
    "EventCreationMode.CreateAndFire": "MicroBitEvent 已初始化，其事件处理程序会立即触发（不适用于中断）。",
    "EventCreationMode.CreateOnly": "MicroBitEvent 已初始化，未发生其他处理。",
    "Gesture.EightG": "检测到 8G 振动时引发",
    "Gesture.FreeFall": "开发板掉落时引发！",
    "Gesture.LogoDown": "徽标朝下且屏幕为垂直方向时引发",
    "Gesture.LogoUp": "徽标朝上且屏幕为垂直方向时引发",
    "Gesture.ScreenDown": "屏幕朝上且开发板水平时引发",
    "Gesture.ScreenUp": "屏幕朝下且开发板水平时引发",
    "Gesture.Shake": "振动时引发",
    "Gesture.SixG": "检测到 6G 振动时引发",
    "Gesture.ThreeG": "检测 3G 振动时引发",
    "Gesture.TiltLeft": "屏幕朝左时引发",
    "Gesture.TiltRight": "屏幕朝右时引发",
    "Image.clear": "将所有像素设为关闭。",
    "Image.height": "获取高度（以行数表示，始终为 5）",
    "Image.pixel": "获取位置“(x,y)”处的像素状态",
    "Image.pixelBrightness": "获取给定位置的像素亮度 ([0..255])",
    "Image.pixel|param|x": "待办事项",
    "Image.pixel|param|y": "待办事项",
    "Image.plotFrame": "在屏幕上绘制图像的第“索引”个帧。",
    "Image.plotFrame|param|xOffset": "要开始显示图像的列索引",
    "Image.plotImage": "向屏幕上的给定列绘制图像",
    "Image.scrollImage": "滚动图像。",
    "Image.scrollImage|param|frameOffset": "每个动画步骤移动的 x 偏移，例如 1、2、5",
    "Image.scrollImage|param|interval": "每个动画步骤之间的时间（单位为毫秒），例如 200",
    "Image.setPixel": "在位置“(x,y)”处设置像素状态",
    "Image.setPixelBrightness": "在给定位置设置特定像素亮度",
    "Image.setPixel|param|value": "待办事项",
    "Image.setPixel|param|x": "待办事项",
    "Image.setPixel|param|y": "待办事项",
    "Image.showFrame": "显示图像带的特定帧。",
    "Image.showFrame|param|frame": "待办事项",
    "Image.showImage": "显示图像中偏移为“x 偏移”处的的帧。",
    "Image.showImage|param|xOffset": "要开始显示图像的列索引",
    "Image.width": "获取宽度（以列数表示）",
    "Math": "数字的更复杂运算。",
    "Math.abs": "返回一个数字 （无论是正数还是负数） 的绝对值。\n例如，-5 的绝对值与 5 的绝对值相同。",
    "Math.abs|param|x": "一个需要绝对值的数值表达式。",
    "Math.acos": "返回一个数字的反余弦（以弧度为单位）",
    "Math.acos|param|x": "数字",
    "Math.asin": "返回一个数字的反正弦（以弧度为单位）",
    "Math.asin|param|x": "数字",
    "Math.atan": "返回一个数字的反正切（以弧度为单位）",
    "Math.atan2": "返回其参数商的反正切。",
    "Math.atan2|param|x": "数字",
    "Math.atan2|param|y": "数字",
    "Math.atan|param|x": "数字",
    "Math.ceil": "返回大于或等于其数值参数的最小数。",
    "Math.ceil|param|x": "数字表达式。",
    "Math.constrain": "Constrains a number to be within a range",
    "Math.cos": "返回一个数字的余弦。",
    "Math.cos|param|x": "以弧度为单位的角度",
    "Math.exp": "返回“e^x”。",
    "Math.exp|param|x": "数字",
    "Math.floor": "返回小于或等于其数值参数的最大数。",
    "Math.floor|param|x": "数字表达式。",
    "Math.icos": "Returns the cosine of an input angle. This is an 8-bit approximation.",
    "Math.icos|param|theta": "input angle from 0-255",
    "Math.idiv": "返回两个数字 32 位有符号整数除法的值。",
    "Math.idiv|param|x": "第一个数字",
    "Math.idiv|param|y": "第二个数字",
    "Math.imul": "返回两个数字 32 位有符号整数乘法的值。",
    "Math.imul|param|x": "第一个数字",
    "Math.imul|param|y": "第二个数字",
    "Math.isin": "Returns the sine of an input angle. This is an 8-bit approximation.",
    "Math.isin|param|theta": "input angle from 0-255",
    "Math.log": "返回一个数字的自然对数（底数为 e）。",
    "Math.log|param|x": "数字",
    "Math.map": "将数字从一个范围重映射到另一个范围。即，“自低”值会映射到“至低”值，“自高”值会映射到“至高”值，以前范围内的值会重映射到新的范围。",
    "Math.map|param|fromHigh": "值当前范围的上限，例如 1023",
    "Math.map|param|fromLow": "值当前范围的下限",
    "Math.map|param|toHigh": "值目标范围的上限，例如 4",
    "Math.map|param|toLow": "值目标范围的下限",
    "Math.map|param|value": "要在范围内映射的值",
    "Math.max": "返回两个数值表达式中较大的一个。",
    "Math.min": "返回两个数值表达式中较小的一个。",
    "Math.pow": "返回底数表达式的指定次幂的值。",
    "Math.pow|param|x": "表达式的底数值。",
    "Math.pow|param|y": "表达式的指数值。",
    "Math.random": "返回 0 到“限值”之间的随机数。",
    "Math.randomBoolean": "随机生成“true”或“false”，就像抛硬币。",
    "Math.randomRange": "返回一个介于最小值（含）和最大值（含）之间的伪随机数。\n如果两个数字都是整型，则结果是整型。",
    "Math.randomRange|param|max": "范围上限，例如 10",
    "Math.randomRange|param|min": "范围下限，例如 0",
    "Math.round": "将提供的数值表达式舍入到最近的数字。",
    "Math.roundWithPrecision": "Rounds ``x`` to a number with the given number of ``digits``",
    "Math.roundWithPrecision|param|digits": "the number of resulting digits",
    "Math.roundWithPrecision|param|x": "the number to round",
    "Math.round|param|x": "要舍入到最近数字的值。",
    "Math.sign": "返回 x 的符号，指示 x 为正数、负数还是零。",
    "Math.sign|param|x": "要测试的数字表达式",
    "Math.sin": "返回一个数字的正弦。",
    "Math.sin|param|x": "以弧度为单位的角度",
    "Math.sqrt": "返回一个数字的平方根。",
    "Math.sqrt|param|x": "数字表达式。",
    "Math.tan": "返回一个数字的正切。",
    "Math.tan|param|x": "以弧度为单位的角度",
    "Math.trunc": "返回去掉小数位的数字。",
    "Math.trunc|param|x": "数字表达式。",
    "Number.toString": "返回一个数字的字符串表示。",
    "Object.keys": "返回对象中的字段名称。",
    "String": "组合、拆分和搜索文本字符串。",
    "String.charAt": "返回位于指定索引处的字符。",
    "String.charAt|param|index": "所需字符以零为基础的索引，例如 0",
    "String.charCodeAt": "返回位于指定位置处的字符的 Unicode 值。",
    "String.charCodeAt|param|index": "所需字符以零为基础的索引。如果指定的索引处没有字符，则返回 NaN。",
    "String.compare": "查看两个字符串中的字符顺序有何不同（以 ASCII 编码）。",
    "String.compare|param|that": "要与目标字符串进行比较的字符串",
    "String.concat": "返回一个包含两个或多个字符串串联的字符串。",
    "String.concat|param|other": "要附加到字符串结尾的字符串，如“add me!”",
    "String.fromCharCode": "使用给定的 ASCII 字符代码编写字符串。",
    "String.includes": "Determines whether a string contains the characters of a specified string.",
    "String.includes|param|searchValue": "the text to find",
    "String.includes|param|start": "optional start index for the search",
    "String.indexOf": "Returns the position of the first occurrence of a specified value in a string.",
    "String.indexOf|param|searchValue": "the text to find",
    "String.indexOf|param|start": "optional start index for the search",
    "String.isEmpty": "返回一个指示字符串是否为空的值",
    "String.length": "返回一个字符串对象的长度。",
    "String.slice": "返回当前字符串的子字符串。",
    "String.slice|param|end": "一个过去的字符索引",
    "String.slice|param|start": "第一个字符的索引；可以为负值，表示从结尾处开始数，例如：0",
    "String.split": "根据分隔符拆分字符串",
    "String.split|param|separator": "@param 限制 ",
    "String.substr": "返回当前字符串的子字符串。",
    "String.substr|param|length": "要提取的字符数，例如 3",
    "String.substr|param|start": "第一个字符的索引；可以是从结尾处开始数的负值，例如 0",
    "String@type": "组合、拆分和搜索文本字符串。",
    "basic": "提供基本 micro:bit 功能的访问权限。",
    "basic.clearScreen": "关闭所有的 LED",
    "basic.forever": "在后台无限重复代码。每次迭代时，允许其他代码运行。",
    "basic.pause": "暂停以毫秒为单位的指定时间",
    "basic.pause|param|ms": "暂停的时间，例如 100、200、500、1000、2000",
    "basic.plotLeds": "在 LED 屏幕上绘制图像。",
    "basic.plotLeds|param|leds": "要打开/关闭的 LED 模式",
    "basic.showAnimation": "将一连串的 LED 屏幕作为动画显示。",
    "basic.showAnimation|param|interval": "每次重绘的时间间隔（以毫秒为单位）",
    "basic.showAnimation|param|leds": "要打开/关闭的 LED 模式",
    "basic.showArrow": "在屏幕上显示箭头",
    "basic.showArrow|param|direction": "箭头的方向",
    "basic.showArrow|param|interval": "显示图标的时间（毫秒）。默认为 600 毫秒。",
    "basic.showIcon": "在 LED 屏幕上绘制选定的图标",
    "basic.showIcon|param|icon": "预定义图标 id",
    "basic.showIcon|param|interval": "显示图标的时间（毫秒）。默认为 600 毫秒。",
    "basic.showLeds": "在 LED 屏幕上绘制图像。",
    "basic.showLeds|param|interval": "绘制后的暂停时间（以毫秒为单位）",
    "basic.showLeds|param|leds": "要打开/关闭的 LED 模式",
    "basic.showNumber": "在屏幕上滚动数字。如果数字适合屏幕（即，单位数），则不滚动。",
    "basic.showNumber|param|interval": "滚动速度；例如 150、100、200、-100",
    "basic.showString": "在显示屏上显示文本，每次一个字符。如果字符串适合屏幕（即，单字母），则不滚动。",
    "basic.showString|param|interval": "转换字符的速度；例如 150、100、200、-100",
    "basic.showString|param|text": "在屏幕上滚动的文本，例如“Hello!”",
    "console": "Reading and writing data to the console output.",
    "console.addListener": "Adds a listener for the log messages",
    "console.log": "Write a line of text to the console output.",
    "console.logValue": "Write a name:value pair as a line of text to the console output.",
    "console.logValue|param|name": "name of the value stream, eg: \"x\"",
    "console.logValue|param|value": "要写入的值",
    "control": "运行时和事件实用程序。",
    "control.assert": "如果条件为 false，在串行控制台上显示消息代码 098。",
    "control.createBuffer": "Create a new zero-initialized buffer.",
    "control.createBufferFromUTF8": "Create a new buffer with UTF8-encoded string",
    "control.createBufferFromUTF8|param|str": "the string to put in the buffer",
    "control.createBuffer|param|size": "number of bytes in the buffer",
    "control.deviceName": "从设备的序列号为设备获取一个友好的名称",
    "control.deviceSerialNumber": "从内部数据为此设备衍生一个独特、一致的序列号。",
    "control.eventSourceId": "返回一个 C++ 运行时常量的值",
    "control.eventTimestamp": "获取在总线上执行的上一个事件的时间戳",
    "control.eventValue": "获取在总线上执行的上一个事件的值",
    "control.eventValueId": "返回一个 C++ 运行时常量的值",
    "control.inBackground": "计划将在后台运行的代码。",
    "control.onEvent": "在事件总线上引发一个事件。",
    "control.panic": "显示指定的错误代码并停止程序。",
    "control.raiseEvent": "在事件总线上引发一个事件。",
    "control.raiseEvent|param|mode": "构造后如何处理事件的可选定义（默认值为 CREATE_AND_FIRE）。",
    "control.raiseEvent|param|src": "生成事件的 MicroBit 组件的 ID，例如 MICROBIT_ID_BUTTON_A。",
    "control.raiseEvent|param|value": "指示事件原因的组件特定代码。",
    "control.reset": "重置 BBC micro:bit。",
    "control.runtimeWarning": "在模拟器中显示警告。",
    "control.waitMicros": "将光纤电流阻止一定的毫秒数",
    "control.waitMicros|param|micros": "需要等待的毫秒数。例如 4",
    "convertToText": "Convert any value to text",
    "convertToText|param|value": "value to be converted to text",
    "game": "单 LED 子画面游戏引擎",
    "game.LedSprite": "以单 LED 渲染的游戏子画面",
    "game.LedSprite.blink": "报告子画面的“闪烁”持续时间",
    "game.LedSprite.brightness": "报告 LED 屏幕上的子画面“亮度”",
    "game.LedSprite.change": "更改子画面的属性",
    "game.LedSprite.changeBlinkBy": "将“闪烁”持续时间更改给定的毫秒数",
    "game.LedSprite.changeBlinkBy|param|ms": "待办事项",
    "game.LedSprite.changeBrightnessBy": "将“y”位置更改给定的数值",
    "game.LedSprite.changeBrightnessBy|param|value": "要更改成的亮度值",
    "game.LedSprite.changeDirectionBy": "通过向右转将“方向”位置更改给定的数值",
    "game.LedSprite.changeDirectionBy|param|angle": "待办事项",
    "game.LedSprite.changeXBy": "将“x”位置更改给定的数值",
    "game.LedSprite.changeXBy|param|x": "待办事项",
    "game.LedSprite.changeYBy": "将“y”位置更改给定的数值",
    "game.LedSprite.changeYBy|param|y": "待办事项",
    "game.LedSprite.change|param|property": "要更改的属性名称",
    "game.LedSprite.change|param|value": "要更改的数值，例如 1",
    "game.LedSprite.delete": "从游戏引擎删除子画面。该子画面将不再出现在屏幕上或会与其他子画面进行交互。",
    "game.LedSprite.direction": "报告子画面的当前方向",
    "game.LedSprite.get": "获取子画面的属性",
    "game.LedSprite.get|param|property": "要更改的属性名称",
    "game.LedSprite.goTo": "在屏幕上转到此位置",
    "game.LedSprite.goTo|param|x": "待办事项",
    "game.LedSprite.goTo|param|y": "待办事项",
    "game.LedSprite.ifOnEdgeBounce": "如果触到屏幕的边缘且朝向它，就改变方向。",
    "game.LedSprite.isTouching": "如果子画面与指定子画面在同一位置，报告 true",
    "game.LedSprite.isTouchingEdge": "如果子画面触到边缘，报告 true",
    "game.LedSprite.isTouching|param|other": "待办事项",
    "game.LedSprite.move": "朝着当前方向移动一定数量的 LED",
    "game.LedSprite.move|param|leds": "要移动的 LED 数量，例如 1、-1",
    "game.LedSprite.off": "关闭子画面（默认为打开）",
    "game.LedSprite.on": "打开子画面（默认为打开）",
    "game.LedSprite.set": "设置子画面的属性",
    "game.LedSprite.setBlink": "设置闪烁持续时间间隔，单位为毫秒。",
    "game.LedSprite.setBlink|param|ms": "待办事项",
    "game.LedSprite.setBrightness": "设置子画面的“亮度”",
    "game.LedSprite.setBrightness|param|brightness": "亮度从 0（关闭）到 255（打开），例如 255。",
    "game.LedSprite.setDirection": "设置当前子画面的方向，四舍五入为最近的 45 的倍数",
    "game.LedSprite.setDirection|param|degrees": "待办事项",
    "game.LedSprite.setX": "设置子画面的“x”位置",
    "game.LedSprite.setX|param|x": "待办事项",
    "game.LedSprite.setY": "设置子画面的“y”位置",
    "game.LedSprite.setY|param|y": "待办事项",
    "game.LedSprite.set|param|property": "要更改的属性名称",
    "game.LedSprite.turn": "转动子画面",
    "game.LedSprite.turnLeft": "向左转（逆时针）",
    "game.LedSprite.turnLeft|param|degrees": "待办事项",
    "game.LedSprite.turnRight": "向右转（顺时针）",
    "game.LedSprite.turnRight|param|degrees": "待办事项",
    "game.LedSprite.turn|param|degrees": "要转动的角度，单位为度，例如 45、90、180、135",
    "game.LedSprite.turn|param|direction": "左或右",
    "game.LedSprite.x": "报告 LED 屏幕的子画面“x 位置”",
    "game.LedSprite.y": "报告 LED 屏幕的子画面“y 位置”",
    "game.addLife": "向当前生命添加生命点",
    "game.addLife|param|lives": "待办事项",
    "game.addScore": "给当前分数增加点数并显示动画",
    "game.addScore|param|points": "要更改的点数量，例如 1",
    "game.createSprite": "新建一个指向右侧的 LED 精灵。",
    "game.createSprite|param|x": "精灵的水平坐标，例如 2",
    "game.createSprite|param|y": "精灵的垂直坐标，例如 2",
    "game.currentTime": "获取剩余时间（自“开始倒计时”）或当前时间（自设备启动或“启动秒表”），以毫秒为单位。",
    "game.gameOver": "显示游戏结束动画和分数。",
    "game.invalidSprite": "获取无效精灵；用于初始化局部变量。",
    "game.isGameOver": "指示游戏是否显示游戏结束序列。",
    "game.isPaused": "指示是否暂停游戏渲染来允许播放其他动画",
    "game.isRunning": "获取一个指示游戏是否仍在运行的值。如果游戏结束，则返回“false”。",
    "game.level": "获取当前等级",
    "game.levelUp": "递增级别并显示一条消息。",
    "game.life": "获取当前生命",
    "game.pause": "停止游戏渲染引擎来允许播放其他动画",
    "game.removeLife": "移除一些生命",
    "game.removeLife|param|life": "待办事项",
    "game.resume": "恢复游戏渲染引擎",
    "game.score": "获取当前分数",
    "game.setLife": "设置当前生命值",
    "game.setLife|param|value": "待办事项",
    "game.setScore": "设置当前分数值",
    "game.setScore|param|value": "新分数值。",
    "game.showScore": "在屏幕上显示分数。",
    "game.startCountdown": "显示动画，然后启动游戏倒计时器，倒计时器到达 0 时，表示游戏结束",
    "game.startCountdown|param|ms": "以毫秒为单位的倒计时持续时间，如 10000",
    "game.startStopwatch": "启动秒表计时器。“当前时间”将返回经过的时间。",
    "hex": "Tagged hex literal converter",
    "images": "创建、操作和显示 LED 图像。",
    "images.createBigImage": "创建一个具有 2 个帧的图像。",
    "images.createImage": "创建适合 LED 屏幕的图像。",
    "input": "来自传感器的事件和数据",
    "input.acceleration": "获取加速度值，单位为 mg（开发板平放，屏幕朝上，x=0、y=0 且 z=-1024）",
    "input.acceleration|param|dimension": "待办事项",
    "input.buttonIsPressed": "获取“A”和“B”按钮的状态（是否被按下）。",
    "input.buttonIsPressed|param|button": "要查询请求的按钮，例如：按钮 A",
    "input.calibrate": "Obsolete, use input.calibrateCompass instead.",
    "input.calibrateCompass": "过时、指南针校准是自动的。",
    "input.compassHeading": "获取当前罗盘方位角，单位为度。",
    "input.isGesture": "Tests if a gesture is currently detected.",
    "input.isGesture|param|gesture": "the type of gesture to detect, eg: Gesture.Shake",
    "input.lightLevel": "读取适合 LED 屏幕的光线亮度，范围为“0”（最暗）到“255”（最亮）。",
    "input.magneticForce": "获取磁力值，单位为 µT。模拟器中不支持此函数。",
    "input.magneticForce|param|dimension": "待办事项",
    "input.onButtonPressed": "当按下再松开按钮 (A、B 或同时按下 A+B） 时执行操作。",
    "input.onButtonPressed|param|body": "事件发生时要运行的代码",
    "input.onButtonPressed|param|button": "需要按下的按钮",
    "input.onGesture": "完成一个特定动作（如晃动 micro:bit）时执行操作。",
    "input.onGesture|param|body": "特定动作发生时要运行的代码",
    "input.onGesture|param|gesture": "要跟踪的特定动作类型，如 Gesture.Shake",
    "input.onLogoDown": "附加徽标朝下且开发板垂直时要运行的代码。",
    "input.onLogoDown|param|body": "待办事项",
    "input.onLogoUp": "附加徽标朝上且开发板垂直时要运行的代码。",
    "input.onLogoUp|param|body": "待办事项",
    "input.onPinPressed": "触摸后松开引脚（同时也触摸 GND 引脚）时执行操作。",
    "input.onPinPressed|param|body": "按下引脚时要运行的代码",
    "input.onPinPressed|param|name": "需要按下的引脚，如 TouchPin.P0",
    "input.onPinReleased": "松开引脚时执行操作。",
    "input.onPinReleased|param|body": "松开引脚时要运行的代码",
    "input.onPinReleased|param|name": "需要松开的引脚，例如 TouchPin.P0",
    "input.onScreenDown": "附加屏幕朝下时要运行的代码。",
    "input.onScreenDown|param|body": "待办事项",
    "input.onScreenUp": "附加屏幕朝上时要运行的代码。",
    "input.onScreenUp|param|body": "待办事项",
    "input.onShake": "附加晃动设备时要运行的代码。",
    "input.onShake|param|body": "待办事项",
    "input.pinIsPressed": "获取引脚状态（是否按下）。需要保持接地以闭合电路。",
    "input.pinIsPressed|param|name": "用于检测触摸的引脚，例如 TouchPin.P0",
    "input.rotation": "倾斜或者转动设备的度数，沿着“X 轴”或“Y 轴”旋转。",
    "input.rotation|param|kind": "待办事项",
    "input.runningTime": "获取设备开启的毫秒数。",
    "input.runningTimeMicros": "获取设备开启的微秒数。",
    "input.setAccelerometerRange": "设置加速计样本范围（以重力加速度表示）。",
    "input.setAccelerometerRange|param|range": "描述测量的最大强度加速度的值",
    "input.temperature": "获取温度，单位为摄氏度 (°C)。",
    "led": "LED 屏幕控件。",
    "led.brightness": "获取屏幕亮度，从 0（关闭）到 255（最亮）。",
    "led.displayMode": "获取当前显示模式",
    "led.enable": "打开或关闭显示屏",
    "led.fadeIn": "在显示屏上淡入。",
    "led.fadeIn|param|ms": "待办事项",
    "led.fadeOut": "在显示屏上淡出。",
    "led.fadeOut|param|ms": "待办事项",
    "led.plot": "使用 x、y 坐标打开指定的 LED（x 为横轴，y 为纵轴）。(0,0) 表示左上方。",
    "led.plotAll": "打开所有的 LED",
    "led.plotBarGraph": "基于“值”和“高”值显示垂直条形图。\n如果“高”值为 0，图表会自动调整。",
    "led.plotBarGraph|param|high": "最大值。如果为 0，会自动调整最大值，例如 0",
    "led.plotBarGraph|param|value": "当前要绘制的值",
    "led.plotBrightness": "使用 x、y 坐标打开具有特定亮度的指定 LED（x 为横轴，y 为纵轴）。(0,0) 表示左上方。",
    "led.plotBrightness|param|brightness": "亮度从 0（关闭）到 255（最亮），例如 255",
    "led.plotBrightness|param|x": "从 0 开始的 LED 横坐标",
    "led.plotBrightness|param|y": "从 0 开始的 LED 纵坐标",
    "led.plot|param|x": "从 0 开始的 LED 横坐标",
    "led.plot|param|y": "从 0 开始的 LED 纵坐标",
    "led.point": "使用 x、y 坐标获取指定 LED 的打开/关闭状态。(0,0) 表示左上方。",
    "led.point|param|x": "待办事项",
    "led.point|param|y": "待办事项",
    "led.screenshot": "为 LED 屏幕截图并返回图像。",
    "led.setBrightness": "设置屏幕亮度，范围为 0（关闭）到 255（最亮）。",
    "led.setBrightness|param|value": "亮度值，例如 255、127、0",
    "led.setDisplayMode": "设置显示屏模式（黑白和灰度）来渲染 LED。",
    "led.setDisplayMode|param|mode": "屏幕操作的显示模式",
    "led.stopAnimation": "取消当前的动画并清除其他待定动画。",
    "led.toggle": "切换特定像素",
    "led.toggleAll": "反转当前的 LED 显示屏",
    "led.toggle|param|x": "待办事项",
    "led.toggle|param|y": "待办事项",
    "led.unplot": "使用 x、y 坐标关闭指定的 LED（x 为横轴，y 为纵轴）。(0,0) 表示左上方。",
    "led.unplot|param|x": "待办事项",
    "led.unplot|param|y": "待办事项",
    "msgpack.packNumberArray": "Pack a number array into a buffer.",
    "msgpack.packNumberArray|param|nums": "the numbers to be packed",
    "msgpack.unpackNumberArray": "Unpacks a buffer into a number array.",
    "music": "生成音乐音调。",
    "music.beat": "返回一个节拍的持续时间，单位为毫秒",
    "music.beginMelody": "开始播放旋律。\n音符以一串字符的形式表示，格式为：NOTE[octave][:duration]",
    "music.beginMelody|param|melodyArray": "要播放的曲调数组，例如 ['g5:1']",
    "music.beginMelody|param|options": "曲调选项，一次/永远，在前台/后台运行",
    "music.builtInMelody": "获取内置曲调的曲调数组。",
    "music.changeTempoBy": "将节奏更改指定的数值",
    "music.changeTempoBy|param|bpm": "节奏的变化（以每分钟节拍数表示），例如 20",
    "music.noteFrequency": "获取音符的频率。",
    "music.noteFrequency|param|name": "音符名称，例如 Note.C",
    "music.onEvent": "注册代码以运行多种曲调事件",
    "music.playTone": "通过引脚“P0”播放音调一段时间。",
    "music.playTone|param|frequency": "要播放的音调的音阶，单位为赫兹 (Hz)",
    "music.playTone|param|ms": "音调持续时间，单位为毫秒 (ms)",
    "music.rest": "通过引脚“P0”暂停播放（不播放任何音乐）一段时间。",
    "music.rest|param|ms": "暂停播放的持续时间，单位为毫秒 (ms)",
    "music.ringTone": "通过引脚“P0”播放音调。",
    "music.ringTone|param|frequency": "要播放的音调的音阶，单位为赫兹 (Hz)",
    "music.setPlayTone": "设置自定义 playTone 函数来播放旋律",
    "music.setTempo": "将节奏设为指定的值",
    "music.setTempo|param|bpm": "新节奏（以每分钟节拍数表示），例如 120",
    "music.stopMelody": "Stops the melodies",
    "music.stopMelody|param|options": "which melody to stop",
    "music.tempo": "返回节奏（以每分钟节拍数表示）。节奏是播放音符的速度（bpm = 每分钟节拍数）。节奏值越大，播放音符的速度越快。",
    "parseFloat": "Convert a string to a number.",
    "parseInt": "将字符串转换为整数。",
    "pins": "控制模拟/数字信号、伺服机构、i2c 等的引脚中的电流",
    "pins.P0": "Pin P0",
    "pins.P1": "Pin P1",
    "pins.P10": "Pin P10",
    "pins.P11": "Pin P3",
    "pins.P12": "Pin P12",
    "pins.P13": "Pin P13",
    "pins.P14": "Pin P14",
    "pins.P15": "Pin P15",
    "pins.P16": "Pin P16",
    "pins.P19": "Pin P19",
    "pins.P2": "Pin P2",
    "pins.P20": "Pin P19",
    "pins.P3": "Pin P3",
    "pins.P4": "Pin P4",
    "pins.P5": "Pin P5",
    "pins.P6": "Pin P6",
    "pins.P7": "Pin P7",
    "pins.P8": "Pin P8",
    "pins.P9": "Pin P9",
    "pins.analogPitch": "向当前音阶引脚发射脉宽调制 (PWM) 信号。使用“模拟设置音阶引脚”定义音阶引脚。",
    "pins.analogPitch|param|frequency": "要调制的频率，单位为 Hz。",
    "pins.analogPitch|param|ms": "音阶的持续时间，单位为毫秒。",
    "pins.analogReadPin": "以模拟信号读取连接器值，即，0 至 1023 之间的值。",
    "pins.analogReadPin|param|name": "要写入的引脚，例如 AnalogPin.P0",
    "pins.analogSetPeriod": "将模拟输出的脉宽调制 (PWM) 配置为指定值，单位为 **微秒** 或“1/1000”毫秒。\n如果此引脚未配置为模拟输出（使用“模拟写入引脚”），此操作将无作用。",
    "pins.analogSetPeriod|param|micros": "持续时间段，单位为微秒，如 20000",
    "pins.analogSetPeriod|param|name": "要设置时间段的模拟引脚，如 AnalogPin.P0",
    "pins.analogSetPitchPin": "使用“模拟音阶”或音乐时设置使用的引脚。",
    "pins.analogSetPitchPin|param|name": "要调制音阶的引脚",
    "pins.analogWritePin": "以模拟信号设置连接器值。值必须在 0 至 1023 之间。",
    "pins.analogWritePin|param|name": "要写入的引脚名称，例如 AnalogPin.P0",
    "pins.analogWritePin|param|value": "要写入引脚的值，介于“0”和“1023”之间。例如 1023、0",
    "pins.createBuffer": "新建一个初始化为零的缓冲区。",
    "pins.createBufferFromArray": "Create a new buffer initalized to bytes from given array.",
    "pins.createBufferFromArray|param|bytes": "data to initalize with",
    "pins.createBuffer|param|size": "缓冲区中的字节数",
    "pins.digitalReadPin": "将指定的引脚或连接器值读取为 0 或 1",
    "pins.digitalReadPin|param|name": "要读取的引脚，例如 DigitalPin.P0",
    "pins.digitalWritePin": "将引脚或连接器值设置为 0 或 1。",
    "pins.digitalWritePin|param|name": "要写入的引脚，例如 DigitalPin.P0",
    "pins.digitalWritePin|param|value": "要在引脚上设置的值，1 或 0",
    "pins.i2cReadBuffer": "从一个 7 位 I2C“地址”读取“大小”字节。",
    "pins.i2cReadNumber": "从 7 位 I2C 地址读取一个数字。",
    "pins.i2cWriteBuffer": "将字节写入一个 7 位 I2C“地址。",
    "pins.i2cWriteNumber": "将一个数字写入 7 位 I2C 地址。",
    "pins.map": "将数字从一个范围重映射到另一个范围。即，“自低”值会映射到“至低”值，“自高”值会映射到“至高”值，以前范围内的值会重映射到新的范围。",
    "pins.map|param|fromHigh": "值当前范围的上限，例如 1023",
    "pins.map|param|fromLow": "值当前范围的下限",
    "pins.map|param|toHigh": "值目标范围的上限，例如 4",
    "pins.map|param|toLow": "值目标范围的下限",
    "pins.map|param|value": "要在范围内映射的值",
    "pins.onPulsed": "将此引脚配置为数字输入，然后生成时间戳是持续时间的事件，此引脚为“高”或“低”。",
    "pins.onPulsed|param|name": "要注册的数字引脚，如 DigitalPin.P0",
    "pins.onPulsed|param|pulse": "脉冲的值，例如 PulseValue.High",
    "pins.pulseDuration": "获取上一个脉冲的持续时间，单位为微秒。此函数应从“onPulsed”处理程序调用。",
    "pins.pulseIn": "返回脉冲的持续时间，以微秒为单位",
    "pins.pulseIn|param|name": "测量脉冲的引脚，例如 DigitalPin.P0",
    "pins.pulseIn|param|value": "脉冲的值，例如 PulseValue.High",
    "pins.servoSetPulse": "将此 IO 引脚配置为模拟/pwm 输出，将时间段配置为 20 ms，并根据给定的值（单位为**微秒**或”1/1000“毫秒）设置脉冲宽度。",
    "pins.servoSetPulse|param|micros": "脉冲持续时间，单位为微秒，例如 1500",
    "pins.servoSetPulse|param|name": "引脚名称",
    "pins.servoWritePin": "向伺服机构写入值，相应地控制轴。在标准伺服机构上，这样会设置轴的角度（单位为度），将轴移动到该方向。在连续旋转伺服机构上，这样会设置伺服机构的速度（“0”表示某个方向的全速，“180”表示另一个方向的全速，接近“90”的值表示无运动）。",
    "pins.servoWritePin|param|name": "要写入的引脚，例如 AnalogPin.P0",
    "pins.servoWritePin|param|value": "角度或旋转速度，例如 180、90、0",
    "pins.setEvents": "配置此引脚激发的事件。事件可订阅为使用“control.onEvent()”。",
    "pins.setEvents|param|name": "要将事件模式设置为开启的引脚，例如 DigitalPin.P0",
    "pins.setEvents|param|type": "此引脚要激发的事件类型，例如 PinEventType.Edge",
    "pins.setPull": "配置此引脚的上拉/下拉。",
    "pins.setPull|param|name": "要将上拉/下拉模式设置为开启的引脚，例如 DigitalPin.P0",
    "pins.setPull|param|pull": "mbed 上拉/下拉配置之一，例如 PinPullMode.PullUp",
    "pins.sizeOf": "获取指定数字格式的大小，以字节为单位。",
    "pins.spiFormat": "设置 SPI 位数和模式",
    "pins.spiFormat|param|bits": "位数，例如 8",
    "pins.spiFormat|param|mode": "模式，例如 3",
    "pins.spiFrequency": "设置 SPI 频率",
    "pins.spiFrequency|param|frequency": "时钟频率，例如 1000000",
    "pins.spiPins": "设置 SPI 实例使用的 MOSI、MISO、SCK 引脚",
    "pins.spiWrite": "写入 SPI 从机并返回响应",
    "pins.spiWrite|param|value": "要发送到 SPI 从机的数据",
    "serial": "通过串行连接读取和写入数据。",
    "serial.NEW_LINE": "The string used to mark a new line, default is \\r\\n",
    "serial.delimiters": "返回与字符串对应的分隔符",
    "serial.onDataReceived": "注册一个分隔符匹配时会触发的事件。",
    "serial.onDataReceived|param|delimiters": "要与接收到的字符对比的字符。",
    "serial.readBuffer": "从接收缓冲器读取多个字符，暂停，直至存在足够的字符。",
    "serial.readBuffer|param|length": "默认缓冲器长度，例如 64",
    "serial.readLine": "从串行端口读取一行文本。",
    "serial.readString": "以字符串形式读取收到的缓冲数据",
    "serial.readUntil": "从串行端口读取一行文本，并在遇到分隔符时返回缓冲器。",
    "serial.readUntil|param|delimiter": "分隔每个文本区块的文本分隔符",
    "serial.redirect": "将串行输入和输出设置为使用引脚，而不是 USB 连接。",
    "serial.redirectToUSB": "指示串行输入和输出使用 USB 连接。",
    "serial.redirect|param|rate": "新波特率，例如 115200",
    "serial.redirect|param|rx": "新接收引脚，例如 SerialPin.P1",
    "serial.redirect|param|tx": "新传输引脚，例如 SerialPin.P0",
    "serial.setRxBufferSize": "Sets the size of the RX buffer in bytes",
    "serial.setRxBufferSize|param|size": "length of the rx buffer in bytes, eg: 32",
    "serial.setTxBufferSize": "Sets the size of the TX buffer in bytes",
    "serial.setTxBufferSize|param|size": "length of the tx buffer in bytes, eg: 32",
    "serial.writeBuffer": "通过串行连接发送缓冲器",
    "serial.writeLine": "向串口输出一行文本",
    "serial.writeNumber": "向串口输出数值",
    "serial.writeNumbers": "Print an array of numeric values as CSV to the serial port",
    "serial.writeString": "通过串行连接发送一段文本。",
    "serial.writeValue": "向串口写入一个“name: value”对行。",
    "serial.writeValue|param|name": "值流名称，如 x",
    "serial.writeValue|param|value": "要写入的值",
  "NeoPixelColors": "安芯教育图形包.",
  "NeoPixelMode": "Different modes for RGB or RGB+W NeoPixel strips",
  "OLED12864_I2C.clear": "清屏",
  "OLED12864_I2C.draw": "绘制 / 重绘屏幕",
  "OLED12864_I2C.drawCircle": "显示文本",
  "OLED12864_I2C.drawCircle|param|color": "is string color, eg: 1",
  "OLED12864_I2C.drawCircle|param|r": "is the text will be show, eg: 'Hello!'",
  "OLED12864_I2C.drawCircle|param|x0": "is X alis, eg: 0",
  "OLED12864_I2C.drawCircle|param|y0": "is Y alis, eg: 0",
  "OLED12864_I2C.hline": "画一条水平线",
  "OLED12864_I2C.hline|param|color": "is line color, eg: 1",
  "OLED12864_I2C.hline|param|len": "is the length of line, eg: 10",
  "OLED12864_I2C.hline|param|x": "is X alis, eg: 0",
  "OLED12864_I2C.hline|param|y": "is Y alis, eg: 0",
  "OLED12864_I2C.init": "初始化显示屏",
  "OLED12864_I2C.invert": "反转显示",
  "OLED12864_I2C.invert|param|d": "true: invert / false: normal, eg: true",
  "OLED12864_I2C.off": "关闭屏幕",
  "OLED12864_I2C.on": "打开屏幕",
  "OLED12864_I2C.pixel": "放置一个点在屏幕上",
  "OLED12864_I2C.pixel|param|color": "is dot color, eg: 1",
  "OLED12864_I2C.pixel|param|x": "is X alis, eg: 0",
  "OLED12864_I2C.pixel|param|y": "is Y alis, eg: 0",
  "OLED12864_I2C.rect": "画一个矩形",
  "OLED12864_I2C.rect|param|color": "is line color, eg: 1",
  "OLED12864_I2C.rect|param|x1": "is X alis, eg: 0",
  "OLED12864_I2C.rect|param|x2": "is X alis, eg: 60",
  "OLED12864_I2C.rect|param|y1": "is Y alis, eg: 0",
  "OLED12864_I2C.rect|param|y2": "is Y alis, eg: 30",
  "OLED12864_I2C.showNumber": "在显示屏显示数字",
  "OLED12864_I2C.showNumber|param|color": "is number color, eg: 1",
  "OLED12864_I2C.showNumber|param|num": "is the number will be show, eg: 12",
  "OLED12864_I2C.showNumber|param|x": "is X alis, eg: 0",
  "OLED12864_I2C.showNumber|param|y": "is Y alis, eg: 0",
  "OLED12864_I2C.showString": "在显示屏显示字符串",
  "OLED12864_I2C.showString|param|color": "is string color, eg: 1",
  "OLED12864_I2C.showString|param|s": "is the text will be show, eg: 'Hello!'",
  "OLED12864_I2C.showString|param|x": "is X alis, eg: 0",
  "OLED12864_I2C.showString|param|y": "is Y alis, eg: 0",
  "OLED12864_I2C.vline": "画一垂直的线",
  "OLED12864_I2C.vline|param|color": "is line color, eg: 1",
  "OLED12864_I2C.vline|param|len": "is the length of line, eg: 10",
  "OLED12864_I2C.vline|param|x": "is X alis, eg: 0",
  "OLED12864_I2C.vline|param|y": "is Y alis, eg: 0",
  "UltrasonicPac": "超声波模块",
  "UltrasonicPac.Ultrasonic": "获取超声波实时距离 (厘米)",
  "UltrasonicPac.Ultrasonic|param|echo": "超声波echo信号",
  "UltrasonicPac.Ultrasonic|param|trig": "超声波trig信号",
  "anxinRGBLeds": "安芯教育图形块",
  "anxinRGBLeds.Strip": "A NeoPixel strip",
  "anxinRGBLeds.Strip.clear": "关闭所有LED.\r\n你需要调用``显示``来使变化可见.",
  "anxinRGBLeds.Strip.easeBrightness": "使用二次缓动功能将亮度应用于当前颜色.",
  "anxinRGBLeds.Strip.length": "获取条带上声明的像素数",
  "anxinRGBLeds.Strip.power": "估计当前灯配置消耗的电流（mA）.",
  "anxinRGBLeds.Strip.range": "创建灯显示范围.",
  "anxinRGBLeds.Strip.range|param|length": "显示长度. eg: 4",
  "anxinRGBLeds.Strip.range|param|start": "起始位置",
  "anxinRGBLeds.Strip.rotate": "向前旋转LED.\r\n你需要调用``显示``来使变化可见.",
  "anxinRGBLeds.Strip.rotate|param|offset": "向前旋转的像素数, eg: 1",
  "anxinRGBLeds.Strip.setBrightness": "设置条带的亮度。 该标志仅适用于将来的操作.",
  "anxinRGBLeds.Strip.setBrightness|param|brightness": "LED亮度 0-255. eg: 255",
  "anxinRGBLeds.Strip.setMatrixColor": "设置LED为给定的颜色(r, g, b的范围为0-255)\r\n你需要调用``显示``来使变化可见.",
  "anxinRGBLeds.Strip.setMatrixColor|param|rgb": "LED的RGB颜色",
  "anxinRGBLeds.Strip.setMatrixColor|param|x": "位置X",
  "anxinRGBLeds.Strip.setMatrixColor|param|y": "位置Y",
  "anxinRGBLeds.Strip.setMatrixWidth": "设置矩阵形条带中的像素数",
  "anxinRGBLeds.Strip.setMatrixWidth|param|width": "行个数",
  "anxinRGBLeds.Strip.setPin": "设置灯带连接的引脚，默认为P0.",
  "anxinRGBLeds.Strip.setPixelColor": "将LED设置为给定颜色（r，g，b的范围为0-255）. \r\n你需要调用``显示``来使变化可见.",
  "anxinRGBLeds.Strip.setPixelColor|param|pixeloffset": "灯带中的位置",
  "anxinRGBLeds.Strip.setPixelColor|param|rgb": "LED的RGB颜色",
  "anxinRGBLeds.Strip.setPixelWhiteLED": "对于带RGB + W LED的灯带，请设置白色LED亮度。 这仅适用于RGB + W 灯带.",
  "anxinRGBLeds.Strip.setPixelWhiteLED|param|pixeloffset": "灯带中LED的位置",
  "anxinRGBLeds.Strip.setPixelWhiteLED|param|white": "LED的亮度",
  "anxinRGBLeds.Strip.shift": "向前移动LED并用零清除.\r\n你需要调用``显示``来使变化可见.",
  "anxinRGBLeds.Strip.shift|param|offset": "向前移动的像素数, eg: 1",
  "anxinRGBLeds.Strip.show": "将所有更改发送到条带.",
  "anxinRGBLeds.Strip.showBarGraph": "根据“value”和“high”值显示垂直条形图.\r\n如果`high`为0，则会自动调整图表.",
  "anxinRGBLeds.Strip.showBarGraph|param|high": "最大值, eg: 255",
  "anxinRGBLeds.Strip.showBarGraph|param|value": "要绘制的当前值",
  "anxinRGBLeds.Strip.showColor": "显示给定颜色的所有LED（r，g，b的范围为0-255）.",
  "anxinRGBLeds.Strip.showColor|param|rgb": "RGB颜色",
  "anxinRGBLeds.Strip.showRainbow": "在所有LED上显示彩虹图案.",
  "anxinRGBLeds.Strip.showRainbow|param|endHue": "彩虹的结束色调值, eg: 360",
  "anxinRGBLeds.Strip.showRainbow|param|startHue": "彩虹的起始色调值, eg: 1",
  "anxinRGBLeds.colors": "获取已知颜色的RGB值",
  "anxinRGBLeds.createPixel": "创建一个彩灯.",
  "anxinRGBLeds.createPixel|param|numleds": "条带中的LED数量, eg: 24,30,60,64",
  "anxinRGBLeds.createPixel|param|pin": "彩灯连接的引脚.",
  "anxinRGBLeds.hsl": "将色调饱和度光度值转换为RGB颜色",
  "anxinRGBLeds.hsl|param|h": "色调 0 - 360",
  "anxinRGBLeds.hsl|param|l": "光度 0 - 99",
  "anxinRGBLeds.hsl|param|s": "饱和度 0 - 99",
  "anxinRGBLeds.rgb": "将红色，绿色，蓝色通道转换为RGB颜色",
  "anxinRGBLeds.rgb|param|blue": "蓝色通道值 0 - 255. eg: 255",
  "anxinRGBLeds.rgb|param|green": "绿色通道值 0 - 255. eg: 255",
  "anxinRGBLeds.rgb|param|red": "红色通道值 0 - 255. eg: 255",
  "anxinSegPac": "安芯教育图形包.\n\n安芯教育图形块",
  "anxinSegPac.TM1637LEDs": "TM1637 LED display",
  "anxinSegPac.TM1637LEDs._dat": "set data to TM1637, with given bit",
  "anxinSegPac.TM1637LEDs._start": "Start",
  "anxinSegPac.TM1637LEDs._stop": "Stop",
  "anxinSegPac.TM1637LEDs._write_byte": "send a byte to 2-wire interface",
  "anxinSegPac.TM1637LEDs._write_data_cmd": "send command1",
  "anxinSegPac.TM1637LEDs._write_dsp_ctrl": "send command3",
  "anxinSegPac.TM1637LEDs.clear": "显示为0.",
  "anxinSegPac.TM1637LEDs.init": "initial TM1637",
  "anxinSegPac.TM1637LEDs.intensity": "设置数码管亮度, 范围是 [0-8], 0 表明关闭.",
  "anxinSegPac.TM1637LEDs.intensity|param|val": "数码管的亮度值, eg: 7",
  "anxinSegPac.TM1637LEDs.off": "关闭数码管 LED.",
  "anxinSegPac.TM1637LEDs.on": "点亮数码管.",
  "anxinSegPac.TM1637LEDs.showDP": "显示或者隐藏小数点",
  "anxinSegPac.TM1637LEDs.showDP|param|bit": "是小数点位置, eg: 1",
  "anxinSegPac.TM1637LEDs.showDP|param|show": "是否显示, eg: true",
  "anxinSegPac.TM1637LEDs.showHex": "显示十六进制数.",
  "anxinSegPac.TM1637LEDs.showHex|param|num": "是一个十六进制数, eg: 0",
  "anxinSegPac.TM1637LEDs.showNumber": "显示数字.",
  "anxinSegPac.TM1637LEDs.showNumber|param|num": "数字, eg: 0",
  "anxinSegPac.TM1637LEDs.showbit": "在指定位置显示数字.",
  "anxinSegPac.TM1637LEDs.showbit|param|bit": "显示的位置, eg: 0",
  "anxinSegPac.TM1637LEDs.showbit|param|num": "要显示的数字, eg: 5",
  "anxinSegPac.create": "创建一个数码管变量.",
  "anxinSegPac.create|param|clk": "引脚CLK, eg: DigitalPin.P1",
  "anxinSegPac.create|param|dio": "引脚DIO, eg: DigitalPin.P2",
  "ntcPac": "安芯教育图形块",
  "ntcPac.Temperature": "将 NTC 的 ADC 数据转换为温度",
  "ntcPac.Temperature|param|adcpin": "是ADC的输入引脚",
  "parseFloat": "Convert a string to a number.",
  "parseInt": "Convert a string to an integer.",
  "table_B3950": "安芯教育图形包.",
  "radio": "使用无线数据包传输数据",
  "radio.onReceivedMessage": "Registers code to run for a particular message",
  "radio.onReceivedMessage|param|msg": "@param handler ",
  "radio.sendMessage": "Broadcasts a message over radio",
  "radio": "使用无线数据包传输数据",
    "radio.Packet.receivedBuffer": "如果在此数据包中发送缓冲区则为缓冲区负载，或者为空缓冲区",
    "radio.Packet.receivedNumber": "在此数据包中发送数字（通过“sendNumber()”或“sendValue()”）时为数字负载，\n如果此数据包不包含数字，则为 0。",
    "radio.Packet.receivedString": "在此数据包中发送字符串（通过“sendString()”或“sendValue()”）时为字符串负载，\n如果此数据包不包含字符串，则为空字符串。",
    "radio.Packet.serial": "数据包发件人的序列号，如果发件人未发送他们的序列号则为 0。",
    "radio.Packet.signal": "数据包的接收信号强度指示器 (RSSI)。",
    "radio.Packet.time": "发送数据包时数据包发件人的系统时间。",
    "radio._packetProperty": "Gets a packet property.",
    "radio._packetProperty|param|type": "the packet property type, eg: PacketProperty.time",
    "radio.onDataPacketReceived": "Deprecated. Use onDataReceived() instead\nRegisters code to run when the radio receives a packet. Also takes the\nreceived packet from the radio queue.",
    "radio.onDataReceived": "将代码注册为在通过无线接收到数据包时运行。",
    "radio.onReceivedBuffer": "Registers code to run when the radio receives a buffer.",
    "radio.onReceivedBufferDeprecated": "Registers code to run when the radio receives a buffer. Deprecated, use\nonReceivedBuffer instead.",
    "radio.onReceivedNumber": "Registers code to run when the radio receives a number.",
    "radio.onReceivedNumberDeprecated": "Registers code to run when the radio receives a number. Deprecated, use\nonReceivedNumber instead.",
    "radio.onReceivedString": "Registers code to run when the radio receives a string.",
    "radio.onReceivedStringDeprecated": "Registers code to run when the radio receives a string. Deprecated, use\nonReceivedString instead.",
    "radio.onReceivedValue": "Registers code to run when the radio receives a key value pair.",
    "radio.onReceivedValueDeprecated": "Registers code to run when the radio receives a key value pair. Deprecated, use\nonReceivedValue instead.",
    "radio.raiseEvent": "Sends an event over radio to neigboring devices",
    "radio.readRawPacket": "Takes the next packet from the radio queue and returns its contents in a Buffer",
    "radio.receiveNumber": "从无线队列读取下一个数据包并返回数据包的数字负载，如果数据包不包含数字，则返回 0。",
    "radio.receiveString": "从无线队列读取下一个数据包并返回数据包的字符串负载，如果数据包不包含字符串，则返回空字符串。",
    "radio.receivedBuffer": "从取自无线队列（通过“receiveNumber”、“receiveString”等）的上一个数据包返回缓冲区负载，如果该数据包不包含字符串，则返回空字符串。",
    "radio.receivedNumber": "从取自无线队列（通过“receiveNumber”、“receiveString”等）的上一个数据包返回数字负载，如果该数据包不包含数字，则返回 0。",
    "radio.receivedPacket": "Returns properties of the last radio packet received.",
    "radio.receivedPacket|param|type": "the type of property to retrieve from the last packet",
    "radio.receivedSerial": "从取自无线队列（通过“receiveNumber”、“receiveString”等）的上一个数据包返回发件人 micro:bit 的序列号，如果该数据包没有发送序列号，则返回 0。",
    "radio.receivedSignalStrength": "从获取自无线队列的上一个数据包中获取接收信号强度指示器 (RSSI)（通过“receiveNumber”和“receiveString”等）。在模拟器中不受支持。\nnamespace=radio",
    "radio.receivedString": "从取自无线队列（通过“receiveNumber”、“receiveString”等）的上一个数据包返回字符串负载，如果该数据包不包含字符串，则返回空字符串。",
    "radio.receivedTime": "返回发件人 micro:bit 在发送取自无线队列（通过“receiveNumber”、“receiveString”等）的上一个数据包时它的系统时间。",
    "radio.sendBuffer": "将缓冲区（最长 19 字节）与设备序列号和运行时间广播到组中的任何已连接 micro:bit。",
    "radio.sendNumber": "通过无线将数字广播到组中的任何已连接 micro:bit。",
    "radio.sendRawPacket": "Sends a raw packet through the radio",
    "radio.sendString": "将字符串与设备序列号和运行时间广播到组中的任何已连接 micro:bit。",
    "radio.sendValue": "将名称/值对与设备序列号和运行时间广播到组中的任何已连接 micro:bit。",
    "radio.sendValue|param|name": "字段名称（最多 12 个字符），例如 “name”",
    "radio.sendValue|param|value": "数字值",
    "radio.setGroup": "设置无线通信的组 id。micro:bit 在任何时候都只能侦听一个组 ID。",
    "radio.setGroup|param|id": "组 id 介于“0”至“255”之间，例如 1",
    "radio.setTransmitPower": "将发射器的输出功率电平改为给定值。",
    "radio.setTransmitPower|param|power": "值介于 0 至 7 之间，其中 0 是最低功率，7 是最高功率。例如 7",
    "radio.setTransmitSerialNumber": "将无线设置为在每条消息中都传输序列号。",
    "radio.setTransmitSerialNumber|param|transmit": "指示是否传输序列号的值。例如 true",
    "radio.writeReceivedPacketToSerial": "以 JSON 形式将接收的上一个数据包写入串口。应当在“onDataPacketReceived”回调中调用。",
    "radio.writeValueToSerial": "从无线队列中读取下一个数据包并以 JSON 形式将其写入串口。"
}